/*
 * Sequentialise a list of negotiations between peers
 * into a queue
 * 
 * @author Daniel Seah
 */
var Negotiation = require('./negotiation');

// TODO coalesce requests
function Facilitator() {
	var pair = {};
	
	/*
	 * Retrieves a unique key that represents a pairing
	 * between 2 users
	 */
	var getKey = function(one, two) {
		if(one < two) {
			return '' + one + two;
		} else {
			return '' + two + one;
		}
	};
	
	/*
	 * Open a negotiation between 2 peers and create a data
	 * channel or voice stream between them
	 * 
	 *   label(optional): Name of data channel to create between
	 * 		the peers
	 */
	this.connect = function(caller, callee, label) {
		var key = getKey(caller.id, callee.id);
		if(typeof pair[key] === 'undefined') {
			pair[key] = [];
		}
		var n = new Negotiation(caller, callee, label);
		pair[key].push(n);
		n.on('complete', function() {
			pair[key].splice(0, 1);
			if(pair[key].length >= 1) {
				pair[key][0].connect();
			} else {
				delete pair[key];
			}
		});
		n.on('close', function() {
			delete pair[key];
		});
		if(pair[key].length === 1) {
			n.connect();
		}
	};
}

module.exports = new Facilitator();
