/*
 * Peer IO master server
 * 
 * PeerServer maintains a list of connected Peer IO clients
 * and facilitates connection between two peers.
 * 
 * Peers can request a connection to any other peer. When both
 * peers express interest in each other, a negotiation is
 * started to connect them.
 * 
 * @author Daniel Seah
 */
var http = require('http');
var User = require('./user');
var facilitator = require('./peerfacilitator');

function PeerServer(io) {
	var sio = io;
	if(typeof sio === 'undefined') {
		var app = http.createServer( function(req, res) {} );
		sio = require('socket.io').listen(app);
		app.listen(80);
	}
	
	var peer = sio.of('/pjs');
	var users = {};
	
	peer.on('connection', function(socket) {
		var user = new User(socket.handshake.fbid, socket);
		users[user.id] = user;
		socket.emit('register', socket.handshake.fbid);
		
		socket.on('request', function(pid, label) {
			if(typeof pid !== 'string' || typeof label !== 'string') {
				console.log('Request: Invalid peer request from ' + user.id);
				return;
			}
			console.log('Debug: Peer request to ' + pid + ' labelled "' + label + '"');
			
			user.addInterest(pid, label);
			// Users are interested in each other
			if(user.id && users[pid] && users[pid].isInterested(user.id, label)) {
				var other = users[pid];
				facilitator.connect(user, other, label);
			}
		});
		
		socket.on('call request', function(pid) {
			if(typeof pid !== 'string') {
				console.log('Request: Invalid peer request from ' + user.id);
				return;
			}
			console.log('Debug: New microphone from ' + user.id);
			
			if(user.id && users[pid]) {
				var other = users[pid];
				// Caller (arg 1) will always make the offer
				facilitator.connect(user, other);
			}
		});
		
		
		socket.on('disconnect', function() {
			if(user.id) {
				delete users[user.id];
			}
		});
	});
}

module.exports = PeerServer;